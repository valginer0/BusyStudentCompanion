"""Prompt templates for Mistral models."""
from typing import List, Dict, Optional
from src.book_to_essay.prompts.base import PromptTemplate
from src.book_to_essay.prompts.config import PromptConfig


class MistralPromptTemplate(PromptTemplate):
    """Prompt templates for Mistral language models."""
    
    def format_chunk_analysis_prompt(self, config: PromptConfig) -> str:
        """Format a prompt for analyzing a chunk of text for Mistral model.
        
        Args:
            config: PromptConfig object with fields: chunk, topic, source_info
            
        Returns:
            A formatted prompt string
        """
        prompt = f"""<s>[INST] You are a literary scholar analyzing literature. Analyze the following text excerpt and extract content related to '{config.topic}'.

Text to analyze:
```
{config.chunk}
```

Analyze this text by:
1. Identifying key quotes related to '{config.topic}'
2. Analyzing themes and motifs related to '{config.topic}'
3. Examining character development related to '{config.topic}'

IMPORTANT: Provide ONLY your analysis. Start directly with your substantive analysis. Don't include labels, headers, or refer to yourself. [/INST]"""

        return prompt
    
    def format_essay_generation_prompt(self, config: PromptConfig) -> str:
        """Format a prompt for generating an essay with Mistral model.
        
        Args:
            config: PromptConfig object with fields: analysis_text, topic, style, word_limit, source_info
            
        Returns:
            A formatted prompt string
        """
        prompt = f"""<s>[INST] Write a well-structured {config.style} essay about '{config.topic}' using the following analysis as reference:

```
{config.analysis_text}
```

Your essay should be approximately {config.word_limit} words, use MLA format, include textual evidence, and have a clear thesis statement.

Write a complete essay with introduction, body paragraphs, and conclusion. Start directly with the essay text, with no headers or meta-commentary. [/INST]"""

        return prompt
    
    def format_fallback_prompt(self, config: PromptConfig) -> str:
        """
        Format a fallback prompt for simpler essay generation with Mistral model.

        NOTE: This method is retained for reference and for error text mapping only.
        It should NOT be used to generate fallback essays. All essay generation failures should raise explicit errors instead of producing fallback content.
        """
        prompt = f"""<s>[INST] Write a {config.word_limit}-word {config.style} essay analyzing '{config.topic}' in literature. Use MLA format and include textual evidence. Begin directly with your essay text. [/INST]"""
        
        return prompt
    
    def extract_response(self, generated_text: str) -> str:
        """Extract the model's response from the generated text.
        
        Args:
            generated_text: The raw text generated by the model
            
        Returns:
            The extracted response
        """
        # Extract only the essay part (after the prompt)
        if "[/INST]" in generated_text:
            return generated_text.split("[/INST]")[1].strip()
        return generated_text
