"""Base prompt template class for language models."""
from abc import ABC, abstractmethod
from typing import List, Dict, Optional


class PromptTemplate(ABC):
    """Base class for prompt templates for different language models."""
    
    @abstractmethod
    def format_chunk_analysis_prompt(self, 
                                    chunk: str, 
                                    topic: str, 
                                    source_info: Optional[str] = None) -> str:
        """Format a prompt for analyzing a chunk of text.
        
        Args:
            chunk: The text chunk to analyze
            topic: The topic to focus on
            source_info: Optional information about the source
            
        Returns:
            A formatted prompt string
        """
        pass
    
    @abstractmethod
    def format_essay_generation_prompt(self, 
                                      analysis_text: str, 
                                      topic: str, 
                                      style: str,
                                      word_limit: int,
                                      source_info: Optional[str] = None) -> str:
        """Format a prompt for generating an essay.
        
        Args:
            analysis_text: The text analysis to use for essay generation
            topic: The essay topic
            style: The writing style
            word_limit: The target word count
            source_info: Optional information about the source
            
        Returns:
            A formatted prompt string
        """
        pass
    
    @abstractmethod
    def format_fallback_prompt(self,
                              topic: str,
                              style: str,
                              word_limit: int) -> str:
        """Format a fallback prompt for simpler essay generation.
        
        Args:
            topic: The essay topic
            style: The writing style
            word_limit: The target word count
            
        Returns:
            A formatted prompt string
        """
        pass
    
    @abstractmethod
    def extract_response(self, generated_text: str) -> str:
        """Extract the model's response from the generated text.
        
        Args:
            generated_text: The raw text generated by the model
            
        Returns:
            The extracted response
        """
        pass
