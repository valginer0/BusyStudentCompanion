"""Base prompt template class for language models."""
from abc import ABC, abstractmethod
from typing import List, Dict, Optional
from src.book_to_essay.prompts.config import PromptConfig


class PromptTemplate(ABC):
    """Base class for prompt templates for different language models."""
    
    @abstractmethod
    def format_chunk_analysis_prompt(self, config: PromptConfig) -> str:
        """Format a prompt for analyzing a chunk of text.
        
        Args:
            config: PromptConfig object with all relevant fields
            
        Returns:
            A formatted prompt string
        """
        pass
    
    @abstractmethod
    def format_essay_generation_prompt(self, config: PromptConfig) -> str:
        """Format a prompt for generating an essay.
        
        Args:
            config: PromptConfig object with all relevant fields
            
        Returns:
            A formatted prompt string
        """
        pass
    
    @abstractmethod
    def format_fallback_prompt(self, config: PromptConfig) -> str:
        """
        Format a fallback prompt for simpler essay generation.

        NOTE: This method is retained for reference and for mapping error codes/messages.
        It should NOT be used to generate fallback essays. All essay generation failures should raise explicit errors instead of producing fallback content.
        """
        pass
    
    @abstractmethod
    def extract_response(self, generated_text: str) -> str:
        """Extract the model's response from the generated text.
        
        Args:
            generated_text: The raw text generated by the model
            
        Returns:
            The extracted response
        """
        pass
